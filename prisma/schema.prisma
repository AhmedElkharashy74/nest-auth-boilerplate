// schema.prisma
datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}



model User {
  id        String     @id @default(cuid())
  email     String?    @unique
  username  String?    @unique
  password  String?
  name      String?
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Auth Relations
  accounts  Account[]
  sessions  Session[]
  roles     UserRole[]

  // Business Relations
  carts     Cart[]
  orders    Order[]
}

model Account {
  id                String   @id @default(cuid())
  provider          String   // "google" | "github" | "local"
  providerAccountId String
  type              String
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?

  userId String
  user   User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

model Role {
  id        Int              @id @default(autoincrement())
  name      String           @unique // "admin", "editor", "user"
  createdAt DateTime         @default(now())

  users           UserRole[]
  RolePermission  RolePermission[]
}

model UserRole {
  id     Int   @id @default(autoincrement())
  userId String
  roleId Int

  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model Permission {
  id        Int              @id @default(autoincrement())
  action    String           // "read", "write", "delete"
  resource  String           // "item", "package", "category", "user"
  roles     RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role        Role        @relation(fields: [roleId], references: [id])
  permission  Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

// =====================
// Business Models
// =====================

model Category {
  id            Int        @id @default(autoincrement())
  name          String
  description   String  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  slug          String     @unique
  isActive      Boolean    @default(false)

  packages  Package[]
}
model Package {
  id          Int            @id @default(autoincrement())
  name        String
  description String?         @db.VarChar(500)
  price       Decimal         @db.Decimal(10,2)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  categoryId  Int
  category    Category        @relation(fields: [categoryId], references: [id])

  packageItems PackageItem[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
}

model Item {
  id          Int        @id @default(autoincrement())
  name        String
  description String?     @db.VarChar(500)
  price       Decimal     @db.Decimal(10,2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  packageItems PackageItem[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
}

model PackageItem {
  id        Int     @id @default(autoincrement())
  packageId Int
  itemId    Int

  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  item      Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([packageId, itemId])
}
model Cart {
  id        Int        @id @default(autoincrement())
  userId    String?    // null for guest carts
  guestToken String?   @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id       Int   @id @default(autoincrement())
  cartId   Int
  itemId   Int?
  packageId Int?

  quantity Int   @default(1)

  cart     Cart     @relation(fields: [cartId], references: [id])
  item     Item?    @relation(fields: [itemId], references: [id])
  package  Package? @relation(fields: [packageId], references: [id])
}

model Order {
  id             Int         @id @default(autoincrement())
  userId         String?
  shippingAddress String?     // Required if contains physical items
  totalAmount    Float
  status         String       @default("pending") // "pending", "paid", "cancelled"
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  user       User?        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payment    Payment?
}

model OrderItem {
  id            Int        @id @default(autoincrement())
  orderId       Int
  itemId        Int?
  packageId     Int?
  quantity      Int        @default(1)
  price         Float
  deliveryStatus String?   // "pending", "shipped", "delivered" (for physical items)

  order   Order   @relation(fields: [orderId], references: [id])
  item    Item?   @relation(fields: [itemId], references: [id])
  package Package? @relation(fields: [packageId], references: [id])
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId   Int      @unique
  provider  String   // e.g., "stripe", "paypal"
  amount    Float
  status    String   @default("pending") // "pending", "completed", "failed"
  createdAt DateTime @default(now())

  order     Order    @relation(fields: [orderId], references: [id])
}
